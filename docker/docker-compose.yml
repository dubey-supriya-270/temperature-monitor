version: "3.7"
services:
  redis:
    image: "redis:alpine"
    container_name: redis-container
    ports:
      - "6379:6379"  # Exposing Redis port
    networks:
      - temperature-monitoring-network
    restart: unless-stopped  # Ensures Redis restarts if it crashes

  mongodb:
    image: "mongo:latest"
    container_name: mongodb-container
    ports:
      - "27017:27017"  # Exposing MongoDB port
    networks:
      - temperature-monitoring-network
    restart: unless-stopped  # Ensures MongoDB restarts if it crashes
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example  # You can replace 'example' with a custom password
      MONGO_INITDB_DATABASE: temperatureDB
    volumes:
      - ./init-scripts:/docker-entrypoint-initdb.d:ro


  rabbitmq:
    image: "rabbitmq:3-management"
    container_name: rabbitmq-container
    ports:
      - "5672:5672"    # AMQP protocol port
      - "15672:15672"  # RabbitMQ Management UI port
    networks:
      - temperature-monitoring-network
    restart: unless-stopped  # Ensures RabbitMQ restarts if it crashes
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest  # Default user credentials
  
  n8n:
    image: n8nio/n8n
    container_name: n8n-container
    ports:
      - "5678:5678"  # Exposing n8n port
    networks:
      - temperature-monitoring-network
    restart: unless-stopped
    environment:
      GENERIC_TIMEZONE: "Europe/Berlin"  # Adjust to your timezone
      N8N_BASIC_AUTH_ACTIVE: "true"  # Enable basic authentication (optional)
      N8N_BASIC_AUTH_USER: "admin"  # Set username
      N8N_BASIC_AUTH_PASSWORD: "admin"  # Set password

  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: backend-container
    ports:
      - "3000:3000"  # Exposing backend port
    networks:
      - temperature-monitoring-network
    depends_on:
      - mongodb
      - rabbitmq
      - redis
      - n8n
    environment:
      MONGODB_URI: mongodb://root:example@mongodb:27017/temperatureDB?authSource=admin
      RABBITMQ_HOST: rabbitmq
      REDIS_URL: redis://redis:6379/0
      ALLOWED_ORIGINS: http://frontend:3001
      PORT: 3000
      N8N_WEBHOOK_URL: http://n8n:5678/webhook/temperature

  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: frontend-container
    ports:
      - "3001:80"  # Exposing frontend port
    networks:
      - temperature-monitoring-network
    depends_on:
      - backend
    environment:
      VITE_SOCKET_URL: wss://backend:3000


networks:
  temperature-monitoring-network:
    driver: bridge
